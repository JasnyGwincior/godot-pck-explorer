diff --git a/main/main.cpp b/main/main.cpp
index 7e2a32f6b3..198aff439e 100644
--- a/main/main.cpp
+++ b/main/main.cpp
@@ -943,7 +943,7 @@ Error Main::setup(const char *execpath, int argc, char *argv[], bool p_second_ph
 #else
 		const String error_msg = "Error: Couldn't load project data at path \"" + project_path + "\". Is the .pck file missing?\nIf you've renamed the executable, the associated .pck file should also be renamed to match the executable's name (without the extension).\n";
 		OS::get_singleton()->print("%s", error_msg.utf8().get_data());
-		OS::get_singleton()->alert(error_msg);
+		//OS::get_singleton()->alert(error_msg);
 
 		goto error;
 #endif
@@ -1049,7 +1049,7 @@ Error Main::setup(const char *execpath, int argc, char *argv[], bool p_second_ph
 #endif
 			const String error_msg = "Error: Can't run project: no main scene defined in the project.\n";
 			OS::get_singleton()->print("%s", error_msg.utf8().get_data());
-			OS::get_singleton()->alert(error_msg);
+			//OS::get_singleton()->alert(error_msg);
 			goto error;
 #ifdef TOOLS_ENABLED
 		}
@@ -1818,7 +1818,7 @@ bool Main::start() {
 				if (obj) {
 					memdelete(obj);
 				}
-				OS::get_singleton()->alert("Error: Invalid MainLoop script base type: " + script_base);
+				//OS::get_singleton()->alert("Error: Invalid MainLoop script base type: " + script_base);
 				ERR_FAIL_V_MSG(false, vformat("The global class %s does not inherit from SceneTree or MainLoop.", main_loop_type));
 			}
 			script_loop->set_init_script(script_res);
@@ -1832,7 +1832,7 @@ bool Main::start() {
 
 	if (!main_loop) {
 		if (!ClassDB::class_exists(main_loop_type)) {
-			OS::get_singleton()->alert("Error: MainLoop type doesn't exist: " + main_loop_type);
+			//OS::get_singleton()->alert("Error: MainLoop type doesn't exist: " + main_loop_type);
 			return false;
 		} else {
 			Object *ml = ClassDB::instance(main_loop_type);
diff --git a/platform/server/detect.py b/platform/server/detect.py
index 98ecb771ae..8d9bc44a8a 100644
--- a/platform/server/detect.py
+++ b/platform/server/detect.py
@@ -268,3 +268,21 @@ def configure(env):
         else:
             if env["use_llvm"] and platform.system() != "FreeBSD":
                 env.Append(LIBS=["atomic"])
+
+    if not env["tools"]:
+        import subprocess
+        import re
+
+        linker_version_str = subprocess.check_output(
+            [env.subst(env["LINK"]), "-Wl,--version"] + env.subst(env["LINKFLAGS"])
+        ).decode("utf-8")
+        gnu_ld_version = re.search("^GNU ld [^$]*(\d+\.\d+)$", linker_version_str, re.MULTILINE)
+        if not gnu_ld_version:
+            print(
+                "Warning: Creating template binaries enabled for PCK embedding is currently only supported with GNU ld, not gold or LLD."
+            )
+        else:
+            if float(gnu_ld_version.group(1)) >= 2.30:
+                env.Append(LINKFLAGS=["-T", "platform/x11/pck_embed.ld"])
+            else:
+                env.Append(LINKFLAGS=["-T", "platform/x11/pck_embed.legacy.ld"])
\ No newline at end of file
